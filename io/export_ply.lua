-- export_ply.lua
-- PLY file export for voxel models

local exportPLY = {}

--------------------------------------------------------------------------------
-- Export the voxel model to PLY format
-- @param voxels The voxel model to export
-- @param filePath Output file path for the PLY file
-- @param options Optional export options
-- @return Boolean indicating success or failure
--------------------------------------------------------------------------------
function exportPLY.export(voxels, filePath, options)
  options = options or {}
  local scaleModel = options.scaleModel or 1.0
  if not filePath:lower():match("%.ply$") then
    filePath = filePath .. ".ply"
  end
  local plyFile = io.open(filePath, "w")
  if not plyFile then return false end

  -- Y inversion bounds
  local minY, maxY = math.huge, -math.huge
  for _, v in ipairs(voxels) do
    if v.y < minY then minY = v.y end
    if v.y > maxY then maxY = v.y end
  end
  local heightSpan = maxY - minY

  plyFile:write("ply\n")
  plyFile:write("format ascii 1.0\n")
  plyFile:write("comment Generated by Voxel Model Maker for Aseprite\n")
  plyFile:write("comment Number of voxels: " .. #voxels .. "\n")
  local numVertices = #voxels * 8
  local numFaces = #voxels * 12
  plyFile:write("element vertex " .. numVertices .. "\n")
  plyFile:write("property float x\n")
  plyFile:write("property float y\n")
  plyFile:write("property float z\n")
  plyFile:write("property uchar red\n")
  plyFile:write("property uchar green\n")
  plyFile:write("property uchar blue\n")
  plyFile:write("element face " .. numFaces .. "\n")
  plyFile:write("property list uchar int vertex_index\n")
  plyFile:write("end_header\n")
  
  -- Generate vertices and faces for all voxels
  local vertexIndex = 0
  
  -- Write vertices
  for _, voxel in ipairs(voxels) do
    -- Create cube vertices (scaled)
    local x = voxel.x * scaleModel
    local invY = (heightSpan - (voxel.y - minY)) + minY
    local y = invY * scaleModel
    local z = voxel.z * scaleModel
    local size = scaleModel
    
    -- Define 8 vertices of the cube with color
    local v1 = {x, y, z}                       -- Bottom-back-left
    local v2 = {x + size, y, z}                -- Bottom-back-right
    local v3 = {x + size, y, z + size}         -- Bottom-front-right
    local v4 = {x, y, z + size}                -- Bottom-front-left
    local v5 = {x, y + size, z}                -- Top-back-left
    local v6 = {x + size, y + size, z}         -- Top-back-right
    local v7 = {x + size, y + size, z + size}  -- Top-front-right
    local v8 = {x, y + size, z + size}         -- Top-front-left
    
    -- Color for all vertices
    local r = voxel.color.r
    local g = voxel.color.g
    local b = voxel.color.b
    
    -- Write vertex positions with colors
    plyFile:write(string.format("%f %f %f %d %d %d\n", v1[1], v1[2], v1[3], r, g, b))
    plyFile:write(string.format("%f %f %f %d %d %d\n", v2[1], v2[2], v2[3], r, g, b))
    plyFile:write(string.format("%f %f %f %d %d %d\n", v3[1], v3[2], v3[3], r, g, b))
    plyFile:write(string.format("%f %f %f %d %d %d\n", v4[1], v4[2], v4[3], r, g, b))
    plyFile:write(string.format("%f %f %f %d %d %d\n", v5[1], v5[2], v5[3], r, g, b))
    plyFile:write(string.format("%f %f %f %d %d %d\n", v6[1], v6[2], v6[3], r, g, b))
    plyFile:write(string.format("%f %f %f %d %d %d\n", v7[1], v7[2], v7[3], r, g, b))
    plyFile:write(string.format("%f %f %f %d %d %d\n", v8[1], v8[2], v8[3], r, g, b))
    
    vertexIndex = vertexIndex + 8
  end
  
  -- Write faces
  vertexIndex = 0
  for _ in ipairs(voxels) do
    local base = vertexIndex
    
    -- Write faces (triangulated quads - each face is 2 triangles)
    -- Format is: num_vertices index1 index2 index3
    
    -- Bottom face
    plyFile:write(string.format("3 %d %d %d\n", base, base + 1, base + 2))
    plyFile:write(string.format("3 %d %d %d\n", base + 2, base + 3, base))
    
    -- Top face
    plyFile:write(string.format("3 %d %d %d\n", base + 4, base + 7, base + 6))
    plyFile:write(string.format("3 %d %d %d\n", base + 6, base + 5, base + 4))
    
    -- Front face
    plyFile:write(string.format("3 %d %d %d\n", base + 3, base + 2, base + 6))
    plyFile:write(string.format("3 %d %d %d\n", base + 6, base + 7, base + 3))
    
    -- Back face
    plyFile:write(string.format("3 %d %d %d\n", base, base + 4, base + 5))
    plyFile:write(string.format("3 %d %d %d\n", base + 5, base + 1, base))
    
    -- Left face
    plyFile:write(string.format("3 %d %d %d\n", base, base + 3, base + 7))
    plyFile:write(string.format("3 %d %d %d\n", base + 7, base + 4, base))
    
    -- Right face
    plyFile:write(string.format("3 %d %d %d\n", base + 2, base + 1, base + 5))
    plyFile:write(string.format("3 %d %d %d\n", base + 5, base + 6, base + 2))
    
    vertexIndex = vertexIndex + 8
  end
  plyFile:close()
  return true
end

return exportPLY
